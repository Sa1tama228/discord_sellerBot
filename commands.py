import disnake
from disnake.ext import commands
from disnake import Interaction, ButtonStyle, MessageInteraction
from disnake.ui import View, Button
from db import get_user, create_user, create_order, get_all_orders, get_user_orders, get_order_by_id, \
    approve_order, reject_order, create_unapproved_order, get_all_unapproved_orders

"""—Ç–µ–ª–æ –±–æ—Ç–∞"""


class OrderDetailView(View):
    def __init__(self, bot: commands.Bot, order):
        super().__init__()
        self.bot = bot
        self.order = order

    @disnake.ui.button(label="–ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫", custom_id="back_to_orders")
    async def back_to_orders_button(self, button: disnake.ui.Button, interaction: Interaction):
        orders = await get_all_orders()
        await show_orders(interaction, orders)


class OrderSelectView(View):
    def __init__(self, bot: commands.Bot, orders):
        super().__init__()
        self.bot = bot
        for order in orders:
            self.add_item(Button(label=f"–ó–∞–∫–∞–∑: {order.title}", custom_id=f"order_{order.id}"))


async def show_orders(ctx_or_interaction, orders):
    if orders:
        orders_list = "\n".join([f"üìå **–ù–∞–∑–≤–∞–Ω–∏–µ:** {order.title}\nüíµ **–¶–µ–Ω–∞:** {order.client_price} RC." for order in orders])
        if isinstance(ctx_or_interaction, Interaction):
            await ctx_or_interaction.response.send_message(f"**–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:**\n\n{orders_list}", view=OrderSelectView(ctx_or_interaction.bot, orders))
        else:
            await ctx_or_interaction.send(f"**–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:**\n\n{orders_list}", view=OrderSelectView(ctx_or_interaction.bot, orders))
    else:
        if isinstance(ctx_or_interaction, Interaction):
            await ctx_or_interaction.response.send_message("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        else:
            await ctx_or_interaction.send("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")


class AdminOrderApprovalView(View):
    def __init__(self, bot: commands.Bot, order):
        super().__init__()
        self.bot = bot
        if order is None:
            raise ValueError("Order cannot be None")
        self.order = order

    @disnake.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", style=ButtonStyle.green)
    async def approve_button(self, button: disnake.ui.Button, interaction: Interaction):
        await approve_order(self.order.id)
        await interaction.response.send_message("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        await self.bot.get_user(self.order.client_id).send("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    @disnake.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", style=ButtonStyle.red)
    async def reject_button(self, button: disnake.ui.Button, interaction: Interaction):
        await reject_order(self.order.id)
        await interaction.response.send_message("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")
        await self.bot.get_user(self.order.client_id).send("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


class MainMenuView(View):
    def __init__(self, bot: commands.Bot):
        super().__init__()
        self.bot = bot

    @disnake.ui.button(label="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", style=ButtonStyle.green, custom_id="create_order")
    async def create_order_button(self, button: disnake.ui.Button, interaction: Interaction):
        user_id = interaction.user.id
        await interaction.response.send_message("–Ø –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º.", ephemeral=True)
        cog = self.bot.get_cog("InteractionHandler")
        if cog:
            await cog.initiate_order_creation(user_id)

    @disnake.ui.button(label="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", style=ButtonStyle.blurple, custom_id="my_orders")
    async def my_orders_button(self, button: disnake.ui.Button, interaction: Interaction):
        user_id = interaction.user.id
        orders = await get_user_orders(user_id)
        await show_orders(interaction, orders)

    @disnake.ui.button(label="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤", style=ButtonStyle.gray, custom_id="all_orders")
    async def all_orders_button(self, button: disnake.ui.Button, interaction: Interaction):
        orders = await get_all_orders()
        await show_orders(interaction, orders)


class AdminPanelView(View):
    def __init__(self, bot: commands.Bot):
        super().__init__()
        self.bot = bot

    @disnake.ui.button(label="–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", style=ButtonStyle.gray)
    async def unapproved_orders_button(self, button: disnake.ui.Button, interaction: Interaction):
        orders = await get_all_unapproved_orders()
        if orders:
            await show_admin_order(interaction, orders[0], orders)
        else:
            await interaction.response.send_message("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", ephemeral=True)


async def show_admin_order(interaction, order, orders):
    await interaction.response.send_message(f"–ó–∞–∫–∞–∑:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {order.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n–¶–µ–Ω–∞: {order.client_price}",
                                            view=AdminOrderApprovalView(interaction.bot, order))


@commands.command(name="admin_panel")
@commands.has_permissions(administrator=True)
async def admin_panel_command(ctx):
    await ctx.send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", view=AdminPanelView(ctx.bot))


class OrderCreationView(View):
    def __init__(self, bot: commands.Bot, user_id: int):
        super().__init__()
        self.bot = bot
        self.user_id = user_id

    @disnake.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=ButtonStyle.green)
    async def confirm_button(self, button: disnake.ui.Button, interaction: MessageInteraction):
        cog = self.bot.get_cog("InteractionHandler")
        if cog and self.user_id in cog.user_state:
            state = cog.user_state[self.user_id]
            data = state['data']

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ unapproved_orders
            new_order = await create_unapproved_order(self.user_id, data['title'], data['description'], data['price'],
                                                      data['item'])

            if new_order is None:
                await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", ephemeral=True)
                return

            await interaction.response.send_message("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", ephemeral=True)

            # HERE IS ADMIN ID
            admin = await self.bot.fetch_user(12345678910)
            await admin.send(
                f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n–¶–µ–Ω–∞: {data['price']} RC",
                view=AdminOrderApprovalView(self.bot, new_order))

            del cog.user_state[self.user_id]

    @disnake.ui.button(label="–û—Ç–º–µ–Ω–∞", style=ButtonStyle.red)
    async def cancel_button(self, button: disnake.ui.Button, interaction: MessageInteraction):
        await interaction.response.send_message("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", ephemeral=True)
        cog = self.bot.get_cog("InteractionHandler")
        if cog and self.user_id in cog.user_state:
            del cog.user_state[self.user_id]


class InteractionHandler(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.user_state = {}

    async def initiate_order_creation(self, user_id: int):
        self.user_state[user_id] = {'step': 1, 'data': {}}
        user = await self.bot.fetch_user(user_id)
        await user.send("–ü—Ä–∏–≤–µ—Ç! –û—Ç–æ—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:")

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.guild is None and message.author.id in self.user_state:
            state = self.user_state[message.author.id]
            step = state['step']

            if step == 1:
                state['data']['title'] = message.content
                state['step'] += 1
                await message.author.send("–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –¥–∞–π –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            elif step == 2:
                state['data']['description'] = message.content
                state['step'] += 1
                await message.author.send("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            elif step == 3:
                try:
                    price = int(message.content)
                    state['data']['price'] = price
                    state['step'] += 1
                    await message.author.send("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, —á—Ç–æ –≤—ã–¥–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:")
                except ValueError:
                    await message.author.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.")
            elif step == 4:
                state['data']['item'] = message.content
                state['step'] += 1
                await message.author.send("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
                                          f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {state['data']['title']}\n"
                                          f"–û–ø–∏—Å–∞–Ω–∏–µ: {state['data']['description']}\n"
                                          f"–¶–µ–Ω–∞: {state['data']['price']} RC\n"
                                          f"–ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {state['data']['item']}\n\n"
                                          "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑:",
                                          view=OrderCreationView(self.bot, message.author.id))
            else:
                await message.author.send("–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

    @commands.Cog.listener()
    async def on_interaction(self, interaction: Interaction):
        custom_id = interaction.data["custom_id"]
        if custom_id == "create_order":
            await interaction.response.send_message("–Ø –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º.", ephemeral=True)
            await self.initiate_order_creation(interaction.user.id)
        elif custom_id.startswith("order_"):
            order_id = int(custom_id.split("_")[1])
            order = await get_order_by_id(order_id)
            if order:
                order_details = (
                    f"**–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n\n"
                    f"üÜî **ID:** {order.id}\n"
                    f"üìå **–ù–∞–∑–≤–∞–Ω–∏–µ:** {order.title}\n"
                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {order.description}\n"
                    f"üíµ **–¶–µ–Ω–∞:** {order.client_price} RC.\n"
                )
                await interaction.response.send_message(order_details,
                                                        view=OrderDetailView(self.bot, order),
                                                        ephemeral=True)
            else:
                await interaction.response.send_message("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

    @commands.command(name="start")
    async def start(self, ctx):
        user = await get_user(ctx.author.id)
        if not user:
            await create_user(ctx.author.id, ctx.author.name)
            await ctx.send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.")
        else:
            await ctx.send(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.username}!")
        await ctx.send("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", view=MainMenuView(self.bot))

    @commands.command(name="create_order")
    @commands.cooldown(1, 60, commands.BucketType.user)
    async def create_order_command(self, ctx, title: str, description: str, price: float, item_to_give: str):
        await create_order(ctx.author.id, title, description, price, item_to_give)
        await ctx.send(f"–ó–∞–∫–∞–∑ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    @commands.command(name="my_orders")
    async def my_orders_command(self, ctx):
        orders = await get_user_orders(ctx.author.id)
        await show_orders(ctx, orders)

    @commands.command(name="all_orders")
    async def all_orders_command(self, ctx):
        orders = await get_all_orders()
        await show_orders(ctx, orders)


def setup_commands(bot: commands.Bot):
    bot.add_cog(InteractionHandler(bot))
    print("InteractionHandler cog has been added")
